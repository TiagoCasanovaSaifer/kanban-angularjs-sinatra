#Load and launch SimpleCov at the very top of your test/test_helper.rb (*or spec_helper.rb, cucumber env.rb, or whatever your preferred test framework uses*):
#Note: If SimpleCov starts after your application code is already loaded (via require), it won't be able to track your files and their coverage! The SimpleCov.start must be issued before any of your application code is required!
if ENV["COVERAGE"] #executar coveraga apenas se variavel de ambiente COVERAGE for definida
  require 'simplecov'
  SimpleCov.start

  SimpleCov.start do
    add_group "Models", "app/models"
    add_group "Controllers", "app/controllers"
    # add_group "Long files" do |src_file|
    #   src_file.lines.count > 100
    # end
    # add_group "Short files", LineFilter.new(5) # Using the LineFilter class defined in Filters section above
  end
end
# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
require 'mongoid'
require 'mongoid/nested_serialization'
require 'mongoid-rspec'

ENV['MONGOID_ENV'] = 'test'

ENV['RACK_ENV'] = 'test'

# script para carga inicial de dados do projeto kanban. 
# define projeto template, com colunas padronizadas para os kanbans
Mongoid.load!('app/config/mongoid.yaml')

require './lib/kanban_web_app'

require './app/controllers/base_controller'
[
  './lib',  './app/controllers', './app/models', './app/config/initializers'
].each do |folder|
  Dir["#{folder}/*.rb"].each do |file| 
    require file
  end

end

require "./app/config/app_config"
require "./app/config/#{KanbanWebApp.environment}"
#require '../app/application'

RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.default_path = "./"
  #config.default_path = './spec'
  #config.include Mongoid::Matchers

  config.include RSpec::Matchers
  config.include Mongoid::Matchers
end